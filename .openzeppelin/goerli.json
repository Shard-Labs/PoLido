{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x13b954d5FC225eF64650A7D723de763F03e1dbD2",
    "txHash": "0xf590c8839f784d0104115c0caf5e51890dfa7782c7216adabbe4aeba1f8e7da2",
    "deployTransaction": {
      "hash": "0xf590c8839f784d0104115c0caf5e51890dfa7782c7216adabbe4aeba1f8e7da2",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x3E46BEFDA7112d8954b923ea6bd9f07c2e615e10",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x02540be400"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 242,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x3d14d1756cad5c1af986180324f6177ebd0b6b48e1ec4d699ba5ff094cbb3b72",
      "s": "0x45068be7c78088ee83005a23977097dd40ddf6e35a4eb0ac7bb563d47880a265",
      "v": 45,
      "creates": "0x13b954d5FC225eF64650A7D723de763F03e1dbD2",
      "chainId": 5
    }
  },
  "proxies": [
    {
      "address": "0x778e7Afc101c7DC99f46f0CC4e686694392B3a0d",
      "txHash": "0x54f1778af223001dc4b64921d842c53e81acdff2ce0499f186ff3a7e6be07728",
      "kind": "transparent"
    },
    {
      "address": "0xdaFdbbe656E78c1c0CE7b71B61955988cBBf2770",
      "txHash": "0x4406d3bdf0de2c27491e6e87200aa2e8fb3779c89c56a88030655ac7e4fdbb5f",
      "kind": "transparent"
    },
    {
      "address": "0xA9A400C24f298C208494a5ad59038bb0a74074F1",
      "txHash": "0x7e747fe3b94a5acdffd7df3b8411ae477b9c04c3638a76cd24b23adebd523612",
      "kind": "transparent"
    },
    {
      "address": "0xb31A97312f5644291D48691ccE05EfDF90885a62",
      "txHash": "0xd5e6c1b76fae1363a45b0916bf260bd37853dcbfb87c6c791eb615886620fd04",
      "kind": "transparent"
    },
    {
      "address": "0xdA3b8DBF334AfE1E4f21f27Edd0342a27c2447f1",
      "txHash": "0x8533ab5c7d2095db4abf496c21dc69f3db8d9125dcc6c26ae1675529f7c02472",
      "kind": "transparent"
    },
    {
      "address": "0xBF60fD7479Cf0F97CA6184A2c9b6cC934a9Ccf8b",
      "txHash": "0x03fe8313506e34327379b1def5acac6766c8b5c81b390a1e168997a778d1b91b",
      "kind": "transparent"
    },
    {
      "address": "0x04057894B1E0099e5B047B4247dEB1B8b5ED74AC",
      "txHash": "0x813fd798c60e622f75c9f3278a60f903ae091f3ca50d7c776153b76fab292c2d",
      "kind": "transparent"
    },
    {
      "address": "0x916dCE62Ac0aCEd1D4b32F9e4c624Fb2d0620eF3",
      "txHash": "0x998b8c2b5f996c42fd5e0b07a241ff544d6056b88b6e62bdca196ddf00fa373f",
      "kind": "transparent"
    },
    {
      "address": "0x5255d1AaF74DdF8B18d26e94C3d9C310a713605E",
      "txHash": "0x4c6e356abdda1b1db5930ca7410728fe268500c1fe7414a655c9bd20c9ba7923",
      "kind": "transparent"
    },
    {
      "address": "0x7dCa2D5E5a1d48ACf668e3337B2139a4ec48b6ce",
      "txHash": "0x02f83dc95e047c1846c6f162979498fb0b0d8987f9f8b9e1440b5f4b7c4e3aa5",
      "kind": "transparent"
    },
    {
      "address": "0x808a95c6Dc997BB89cBBaDe25D3e1497c95c7f41",
      "txHash": "0xc21ab5ff9781a0a7f0d73fca1137ee5e14d77cb9338601cd5e901be293a466a8",
      "kind": "transparent"
    },
    {
      "address": "0xC63985Cd5F5703c154bD58f06afEDd790a576875",
      "txHash": "0xe8662843455b71c80cea0e5cfef6d59e296165dd71458534af51f4cee768b279",
      "kind": "transparent"
    },
    {
      "address": "0x3bF4E1743CCCa23724F1F55923FA4a3ED4C80762",
      "txHash": "0x5a0beedf31dc58ae681989c0ddcba53a3d989df2f28ea5b6a3187b5fa8cb9669",
      "kind": "transparent"
    },
    {
      "address": "0x392C87754B73CC3A68059803D37D0387f16c8D81",
      "txHash": "0x810486b68b09b94f0a9e578a63646300fa3f5cc567678a9b15b1f299047ea56f",
      "kind": "transparent"
    },
    {
      "address": "0xb1f3f45360Cf0A30793e38C18dfefCD0d5136f9a",
      "txHash": "0x385abf167e2a8fde0d0e8dcc9bd9ac25c1b1fcf9220673ec58a321a75106f297",
      "kind": "transparent"
    },
    {
      "address": "0xb7f0F701473458549768753F3176411105ec9693",
      "txHash": "0x438cf66d2c876dd9d0e13cc898c00c8f9e30693df0ad40e315ccc06665fb721e",
      "kind": "transparent"
    },
    {
      "address": "0x9A7c69A167160C507602ecB3Df4911e8E98e1279",
      "txHash": "0x1027b290a9ac570e4bb511895422a93e6a1f2e7b29f423fec2572d35b389df50",
      "kind": "transparent"
    }
  ],
  "impls": {
    "c9887b9b0dfb5506cd5c05c0b284c5aaeaea1417c68b6511fafb2b7392e941ea": {
      "address": "0x930C43b8C6a9a66E498b8eA787A807C39321dd84",
      "txHash": "0xc3d0155014b2e97e3449793d534423bcfcf0134e6465ebdce1446625833ad4d8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ValidatorFactoryStorage",
            "label": "validators",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/storages/ValidatorFactoryStorage.sol:14"
          },
          {
            "contract": "ValidatorFactoryStorage",
            "label": "state",
            "type": "t_struct(ValidatorFactoryState)8037_storage",
            "src": "contracts/storages/ValidatorFactoryStorage.sol:16"
          }
        ],
        "types": {
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(ValidatorFactoryState)8037_storage": {
            "label": "struct Operator.ValidatorFactoryState",
            "members": [
              {
                "label": "operator",
                "type": "t_address"
              },
              {
                "label": "validatorImplementation",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "27cda594e119035a51696a3d88c2306f58654ddc6997d8e5c2aabb7306f371ff": {
      "address": "0x21154c14c6d527A2c2e3d9383f1178B3951e8197",
      "txHash": "0x99eb48081798ce7785b062f2c70eead6fed9a5280ca6b6165537c2391997be2f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorStorage",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)7997_storage)",
            "src": "contracts/storages/NodeOperatorStorage.sol:27"
          },
          {
            "contract": "NodeOperatorStorage",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/storages/NodeOperatorStorage.sol:30"
          },
          {
            "contract": "NodeOperatorStorage",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/storages/NodeOperatorStorage.sol:33"
          },
          {
            "contract": "NodeOperatorStorage",
            "label": "state",
            "type": "t_struct(NodeOperatorState)8032_storage",
            "src": "contracts/storages/NodeOperatorStorage.sol:36"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(NodeOperator)7997_storage)": {
            "label": "mapping(uint256 => struct Operator.NodeOperator)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(NodeOperator)7997_storage": {
            "label": "struct Operator.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)7979"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorContract",
                "type": "t_address"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)7979": {
            "label": "enum Operator.NodeOperatorStatus",
            "members": [
              "NONE",
              "ACTIVE",
              "STAKED",
              "UNSTAKED",
              "CLAIMED",
              "EXIT"
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(NodeOperatorState)8032_storage": {
            "label": "struct Operator.NodeOperatorState",
            "members": [
              {
                "label": "totalNodeOpearator",
                "type": "t_uint256"
              },
              {
                "label": "totalActiveNodeOpearator",
                "type": "t_uint256"
              },
              {
                "label": "totalStakedNodeOpearator",
                "type": "t_uint256"
              },
              {
                "label": "totalUnstakedNodeOpearator",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimedNodeOpearator",
                "type": "t_uint256"
              },
              {
                "label": "totalExitNodeOpearator",
                "type": "t_uint256"
              },
              {
                "label": "validatorFactory",
                "type": "t_address"
              },
              {
                "label": "stakeManager",
                "type": "t_address"
              },
              {
                "label": "polygonERC20",
                "type": "t_address"
              },
              {
                "label": "lido",
                "type": "t_address"
              },
              {
                "label": "maxAmountStake",
                "type": "t_uint256"
              },
              {
                "label": "minAmountStake",
                "type": "t_uint256"
              },
              {
                "label": "maxHeimdallFees",
                "type": "t_uint256"
              },
              {
                "label": "minHeimdallFees",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "restake",
                "type": "t_bool"
              },
              {
                "label": "unjail",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6645af028448ff727a81437f8fdc360eb4ae45db92119a857215c26b1cf205c8": {
      "address": "0xa00A10e0A04a9027C9aF7624d3BC9584fE8E5555",
      "txHash": "0x429661d12b3f8e4536d1d29d1421e871d73995277db18dbfbc397d808c307003",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7606",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3603_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)7970)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3596_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7606": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3603_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)7970)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)7970": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3596_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3596_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3596_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d675618b40411b0bc68dcef1e661cd442465a8429fdaca814870720c064824f3": {
      "address": "0x355b56350f0b00eb4765E9A05a56b51e8591F663",
      "txHash": "0x37973ebbbe59b766d7496cc9d0a9446ee6d9d85f493abe0d26ffcf4536efc731",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7606",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3606_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)7970)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3599_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7606": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3606_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)7970)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)7970": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3599_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3599_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3599_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cb84fe46b86f7528446069b8e9f5aa83cb3b2f662a99e4c5c29fdb934f4ba959": {
      "address": "0xE5E48DE4B6dD2d03A017D9920494a64D0F995e77",
      "txHash": "0x5fca3402849396a9b511e449451b2c8112226e2118a5702305407a59b9722c37",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7644",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3608_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8008)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7644": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3608_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8008)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8008": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3601_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "102afeb480cd57c7ae7b46963075537e432091801e1a18c9dd625f3db7279ac6": {
      "address": "0xC4C71447Bb6e0799592e6561C548B0d61f6D679C",
      "txHash": "0x11fcfedbbbba9bd1a22f60e50a0e0199fd8b702080a8f6af70582c5aaf7603af",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7644",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3608_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8008)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7644": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3608_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8008)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8008": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3601_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "28bf379dd5793962e1482ccab1145a1f8eca89bef3fb13c2e96e7c355cf4a412": {
      "address": "0xd6F886CA0bD5bd5677D4b1B367105b078354bBC2",
      "txHash": "0x2a244d6ca56ac439afa9a7f6c069d13184568d66bce6acb3f62817af0ea31fd0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7644",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3608_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8008)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7644": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3608_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8008)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8008": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3601_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c17e9fb26a11956f3e02b71a51669a68bea07ee9c6f3408e984889d27683dd79": {
      "address": "0xBD2235BF68aDA020aC55193A87ED8B7264597bE4",
      "txHash": "0x23ecd75930e1f870da9cd9ff069ea622dd48f77e559d091a1490b626b937ef65",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7650",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3608_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8014)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7650": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3608_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8014)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8014": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3601_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "21a75e0bebbb9364b47d900a3b7c814c9b1b360ebd44878a33017fd17013f946": {
      "address": "0x87e2e03bFE7581E4cb87d027299fcDC0cfb4D105",
      "txHash": "0x665b21f1d1f0728aa6d2419d87460587deddae5a4731a780d8629f6a78a65ee7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7653",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3608_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8017)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7653": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3608_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8017)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8017": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3601_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5f4f97aeda8773903ebf5efebfb2e040832851550ce85e5a6d3af7a0a2dba510": {
      "address": "0x8b7A9AdF93e62560429C57936689C91110fBC00F",
      "txHash": "0x6e6cb685c238a05e0cf28ec19df2feaaf0c08cbc6063a52f82b53d5738931809",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7653",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3608_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8017)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7653": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3608_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8017)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8017": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3601_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3601_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fcca941f87af3ce0310e19fa5222c2b39429659b47cf138e14463dad13d9acfa": {
      "address": "0xed5b69928f753E6BfC5831D03A1acB4F243E2d81",
      "txHash": "0x714d691f11c92e20cd8c9ace2cf4ca4b78a19a447474cb7f3d34fb92ace8621a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7691",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3612_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8055)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3605_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7691": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3612_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8055)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8055": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3605_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3605_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3605_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0866794a44d2f5f5af2e7673386b96b23546ae6fa94c67237aefa308980e6c48": {
      "address": "0x32923Bc4C140CE0a684ae7064236D5016F43988F",
      "txHash": "0xe16e5599b1828bda34cab00d55861eb61266955e6f15597774d36271fd771a5b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7688",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3612_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8052)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3605_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7688": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3612_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8052)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8052": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3605_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3605_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3605_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e9fee93eac883a6daf98c4bb286dc397698dc7dc8adf7448a0da453f3578955e": {
      "address": "0x87D64f81F1a9751c2Cb557f8C06a6950c364591B",
      "txHash": "0xc602c151cf5b9f4b16df509ded895f1b776d37fbdae361310e98b5e5c493ac80",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7734",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3621_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8098)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          },
          {
            "contract": "LidoMatic",
            "label": "totalAmountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:49"
          },
          {
            "contract": "LidoMatic",
            "label": "amountsRequested",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/LidoMatic.sol:50"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7734": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3621_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8098)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8098": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3614_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f8da71ce874338bdd706b3a4d9b6a5f8954b203e60b5a579ba69b6c87234fad3": {
      "address": "0xB960a89cA58c212EA6A64A62Fb00f92bd2285B65",
      "txHash": "0x779318659cf0e558c95e66c4eb6e8a406a7bd66bc37f706ef2faa16e28f494b0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7771",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3621_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8135)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          },
          {
            "contract": "LidoMatic",
            "label": "totalAmountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:49"
          },
          {
            "contract": "LidoMatic",
            "label": "amountsRequested",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/LidoMatic.sol:50"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7771": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3621_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8135)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8135": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3614_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "631fe119fd7cfd1f71609e5ee7488e0f73982ee9e800d1a4039064e30dc9dc79": {
      "address": "0x082419A83cF7C580FDe2aB3507D302d87778AC57",
      "txHash": "0x61c135032ea1595476cc7422d8ccd112622250cfb716d17228e5167069f63474",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7763",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3621_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8127)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          },
          {
            "contract": "LidoMatic",
            "label": "totalAmountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:49"
          },
          {
            "contract": "LidoMatic",
            "label": "amountsRequested",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/LidoMatic.sol:50"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7763": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3621_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8127)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8127": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3614_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9f67e6d08fcb611fb497ec70a67b7a431c35441485d0ceb9657d0a2a8ce0d126": {
      "address": "0x386609fAe674410cf09296967da357420acAD792",
      "txHash": "0x905404565916b7a373482d3c22392f9da44c6e7ea2bdb3dda9ad036f0edf1554",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7788",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3621_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8152)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          },
          {
            "contract": "LidoMatic",
            "label": "totalAmountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:49"
          },
          {
            "contract": "LidoMatic",
            "label": "amountsRequested",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/LidoMatic.sol:50"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7788": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3621_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8152)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8152": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3614_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "09becf652c65840a113614c20d3419bdb8c539a9ed19002b81a892a2a19c7cd4": {
      "address": "0xc1aAAACde91aeA1e5ffA3C270587c8f72e855776",
      "txHash": "0xb63f5aa106c085d23ea4d6529130213d0e3f74b8f995d6b570bdcb9a88cf281e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7800",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3621_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8164)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          },
          {
            "contract": "LidoMatic",
            "label": "totalAmountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:49"
          },
          {
            "contract": "LidoMatic",
            "label": "amountsRequested",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/LidoMatic.sol:50"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7800": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3621_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8164)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8164": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3614_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "254b6ace89ea5e499993ab1497e2cfdde894259c416fce9d28154e119d926d35": {
      "address": "0x3b1D35Ed936720c3Fc437AE4a7364dDf25717860",
      "txHash": "0x627d45ce830ef41e2fd69a044f1eb369eb1440cb038292879d020a980c543f1d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7759",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3621_storage",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:19"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "validatorShares",
            "type": "t_array(t_contract(IValidatorShare)8123)dyn_storage",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:46"
          },
          {
            "contract": "LidoMatic",
            "label": "amountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:48"
          },
          {
            "contract": "LidoMatic",
            "label": "totalAmountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:49"
          },
          {
            "contract": "LidoMatic",
            "label": "amountsRequested",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/LidoMatic.sol:50"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7759": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3621_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_contract(IValidatorShare)8123)dyn_storage": {
            "label": "contract IValidatorShare[]"
          },
          "t_contract(IValidatorShare)8123": {
            "label": "contract IValidatorShare"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3614_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3614_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d8c04f4205cedcab174c1849f9f4a2ad99854fdc108ba0a774cebe53fb37e101": {
      "address": "0x71CE12e2d9676e3f0A9263a25A2B586b742945b2",
      "txHash": "0xf67f6b92a41d2645fdb7c16faec1298218973157a5698c4d3f0d8771a9b03abb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "LidoMatic",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)7951",
            "src": "contracts/LidoMatic.sol:16"
          },
          {
            "contract": "LidoMatic",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)3610_storage",
            "src": "contracts/LidoMatic.sol:17"
          },
          {
            "contract": "LidoMatic",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)8069",
            "src": "contracts/LidoMatic.sol:18"
          },
          {
            "contract": "LidoMatic",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:20"
          },
          {
            "contract": "LidoMatic",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:21"
          },
          {
            "contract": "LidoMatic",
            "label": "token",
            "type": "t_address",
            "src": "contracts/LidoMatic.sol:22"
          },
          {
            "contract": "LidoMatic",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:23"
          },
          {
            "contract": "LidoMatic",
            "label": "totalDelegated",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:24"
          },
          {
            "contract": "LidoMatic",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:25"
          },
          {
            "contract": "LidoMatic",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:26"
          },
          {
            "contract": "LidoMatic",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:27"
          },
          {
            "contract": "LidoMatic",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/LidoMatic.sol:28"
          },
          {
            "contract": "LidoMatic",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/LidoMatic.sol:29"
          },
          {
            "contract": "LidoMatic",
            "label": "user2WithdrawRequest",
            "type": "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3603_storage)dyn_storage)",
            "src": "contracts/LidoMatic.sol:31"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2DelegatedAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:32"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Shares",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:33"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:34"
          },
          {
            "contract": "LidoMatic",
            "label": "user2Nonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:35"
          },
          {
            "contract": "LidoMatic",
            "label": "totalAmountRequested",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:36"
          },
          {
            "contract": "LidoMatic",
            "label": "validator2Index",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/LidoMatic.sol:37"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)7951": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)3610_storage": {
            "label": "struct LidoMatic.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint256"
              },
              {
                "label": "operators",
                "type": "t_uint256"
              },
              {
                "label": "insurance",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IStakeManager)8069": {
            "label": "contract IStakeManager"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_array(t_struct(RequestWithdraw)3603_storage)dyn_storage)": {
            "label": "mapping(address => struct LidoMatic.RequestWithdraw[])"
          },
          "t_array(t_struct(RequestWithdraw)3603_storage)dyn_storage": {
            "label": "struct LidoMatic.RequestWithdraw[]"
          },
          "t_struct(RequestWithdraw)3603_storage": {
            "label": "struct LidoMatic.RequestWithdraw",
            "members": [
              {
                "label": "amountToClaim",
                "type": "t_uint256"
              },
              {
                "label": "amountToBurn",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              },
              {
                "label": "active",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "acf8c4326ffdab8b52d3b8a217e0ae7ff26968490a45b25badf8904f0dcb80d7": {
      "address": "0xb4B141a204d3440406f44dd7e02912e057Ebc3fe",
      "txHash": "0x6181746bdd7780b1c10c466a8770a45b33520d1977ae3fcd2f72e865a5e76150",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ValidatorFactory",
            "label": "validators",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ValidatorFactory.sol:17"
          },
          {
            "contract": "ValidatorFactory",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/ValidatorFactory.sol:19"
          },
          {
            "contract": "ValidatorFactory",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/ValidatorFactory.sol:21"
          },
          {
            "contract": "ValidatorFactory",
            "label": "validatorImplementation",
            "type": "t_address",
            "src": "contracts/ValidatorFactory.sol:23"
          }
        ],
        "types": {
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "dc09b13c596198b89128c685d360c6b66afcf8768f9a1f1f294d3ef66f5a58d0": {
      "address": "0x176E600D04aa18C69fBBDcB0720142a861E263e7",
      "txHash": "0xb8be76e9714421e738e40568db019ee3a50bb51fade3bc835ae5c5679ccbbcf6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:71"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:73"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:75"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:77"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:79"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:81"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:83"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:85"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:88"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:90"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:92"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:94"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:97"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:100"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:103"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:106"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:109"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:112"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:115"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:118"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:122"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4694_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:125"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4694_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4694_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4666"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4666": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "EXIT"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4767375a6df5ec1271e3e685d1bf1de4643a6c567ec160914894232a32922c80": {
      "address": "0x30d1ae8673890D219E6D575298afe28A419Ad6dd",
      "txHash": "0x3811c5b9c534f53792eb570280bdaf627e2646c5257b1732dc5c199512592ad5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "PoLidoNFT",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/PoLidoNFT.sol:14"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenIdIndex",
            "type": "t_uint256",
            "src": "contracts/PoLidoNFT.sol:15"
          },
          {
            "contract": "PoLidoNFT",
            "label": "owner2Tokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:18"
          },
          {
            "contract": "PoLidoNFT",
            "label": "token2Index",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:21"
          },
          {
            "contract": "PoLidoNFT",
            "label": "address2Approved",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:24"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenId2ApprovedIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:27"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9e13c62af1834bac038ed21492c63c69b17c41a369e6d8d6dc29fa4902b080dd": {
      "address": "0xe7703bAb97a2017CE7Cd65B922860cf19ec13D4b",
      "txHash": "0xecb5cf046eaeeefe849454e44bff42932d3171d36624d8a9215e651b998f536b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)10898",
            "src": "contracts/StMATIC.sol:41"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)7853_storage",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11130",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)10931",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:46"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)7846_storage)",
            "src": "contracts/StMATIC.sol:57"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)10898": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)7853_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11130": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)10931": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)7846_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)7846_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromLidoMatic",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "fbff2e7af7412647c38f2038233e97429b30dd3235722c3a6a98e1367b91efc9": {
      "address": "0x922b32A82265e6BCDf35e26a228979F008A54e05",
      "txHash": "0xa07b8c39b85f6749a42e61c68aad98c1d6e28871803380613a967168c1210c66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:68"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:70"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:72"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:74"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:76"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:78"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:80"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:82"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:84"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:89"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:91"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:93"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:121"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4761_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4761_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4761_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4733"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4733": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "25e972843c5ddc473bb578970a0b059bda99596e5432a3cdbaacdc25678ab6c9": {
      "address": "0x3b5A3946725d49B319A58722c592cc90875219A2",
      "txHash": "0x5b1117fe54c14ca5b36c6e0a4eac2afbc5b75aa44f8bf89cf6c37a420e3eea0a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "PoLidoNFT",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/PoLidoNFT.sol:14"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenIdIndex",
            "type": "t_uint256",
            "src": "contracts/PoLidoNFT.sol:15"
          },
          {
            "contract": "PoLidoNFT",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/PoLidoNFT.sol:16"
          },
          {
            "contract": "PoLidoNFT",
            "label": "owner2Tokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:19"
          },
          {
            "contract": "PoLidoNFT",
            "label": "token2Index",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:22"
          },
          {
            "contract": "PoLidoNFT",
            "label": "address2Approved",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:25"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenId2ApprovedIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:28"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "b958f05b958250d57abcff2fa9ba45a1d97f21b8fdb0d60bf79e4419c453527a": {
      "address": "0x3563D6DC45c98FfA5b2a64C048C202a65895DCE6",
      "txHash": "0x66e506d6fb9ede81e0617dfb189f60383f5f72182b9e953c53bb85ae907e9fbf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11010",
            "src": "contracts/StMATIC.sol:41"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)8022_storage",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11242",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11043",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:46"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)8015_storage)",
            "src": "contracts/StMATIC.sol:57"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11010": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)8022_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11242": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11043": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)8015_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)8015_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "17171e984425cc5099ebce5aa1b76b06febacada82ef773c55a915128e0a1128": {
      "address": "0x4d163E524bf89247760b2AC9F0f546F4C3CbE0ec",
      "txHash": "0x8753ec1b4a866d00bd4a1c5de71dbd1360ab27b8bdf5e3dd12ceaaa9a52bc97e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11126",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)8026_storage",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11358",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11159",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)8019_storage)",
            "src": "contracts/StMATIC.sol:58"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10859",
            "src": "contracts/StMATIC.sol:62"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11126": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)8026_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11358": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11159": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)8019_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)8019_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10859": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "6d73b90e9e1b2849851845613aeea83bd693343c5f4c0d77fa9759ae17c172ad": {
      "address": "0x8736C45901Bc0983E870271Ac8a43F0e6eaA91A5",
      "txHash": "0xbaf663bd6c5c7d332bc4794c2b95060aef644053f9cf480bc32d59a62e42ace7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:68"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:70"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:72"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:74"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:76"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:78"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:80"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:82"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:84"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:89"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:91"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:93"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:121"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4763_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4763_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4763_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4735"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4735": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT",
              "JAILED"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d560da0cfd76f1894c7cde07224643bd3025d1905bacf5811615bbdd514e2b2d": {
      "address": "0x490b0f00037737af79794b4ACb558729eCE37350",
      "txHash": "0x068a8ec0ae6436971ed90282dcc2c1c95fa76917e57c3b54c6742a4431f16539",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)10893",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)7801_storage",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11125",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)10926",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10665",
            "src": "contracts/StMATIC.sol:61"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)10893": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)7801_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11125": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)10926": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)7794_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10665": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "c9e8798dac6f6d99c16674cc1211a860d8a1b2c142d78afede9926f6e742aaa8": {
      "address": "0x91b2035b0341e10990A241Af49ed3438E0A10897",
      "txHash": "0xaed631a24718b0873a189b9cf3af9512ebc3ec241295c115e8e59012bc1c93ec",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)10972",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)7801_storage",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11204",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11005",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10744",
            "src": "contracts/StMATIC.sol:61"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)10972": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)7801_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11204": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11005": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)7794_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10744": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "7ec33feb20c32342d7dbfe8dd80aeae00ce673b4ea4d636bb2042d282b9d5fa7": {
      "address": "0xAfDf0dcfaE4Ae948F56c3DBb6a7b089C83A2924B",
      "txHash": "0x615c398881ff58d886b21a61da687f172ad2805cc2eeed8e9dd5b74a8861c06d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)10979",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)7801_storage",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11211",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11012",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10751",
            "src": "contracts/StMATIC.sol:61"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)10979": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)7801_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11211": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11012": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)7794_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10751": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "1fa8639289e4f56c0e28a2b62d4f77cba715aae676189a53cb8a5a9bf92ede9c": {
      "address": "0x89915E004439537d2a30Fc9384E507800BB44644",
      "txHash": "0x25aaea6417cca94d5a1458ef3de384ca78a7de62edbdb9b236d6c1b29d32ef4b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)10971",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)7801_storage",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11203",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11004",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10743",
            "src": "contracts/StMATIC.sol:61"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)10971": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)7801_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11203": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11004": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)7794_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)7794_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10743": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "9dcc630bbf4712de278037c955634c734bd362653e6c447618a98f7192e31bd6": {
      "address": "0x95989f1bc0d1d110003921f3cd62cA2AABafbb77",
      "txHash": "0x49d78ab7831ef3bff8e80e10cbf5be7b2512f1a2c6084c524b52c6019ac3d272",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)10948",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)7786_storage",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11180",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)10981",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)7779_storage)",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10720",
            "src": "contracts/StMATIC.sol:61"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)10948": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)7786_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11180": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)10981": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)7779_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)7779_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10720": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "46303ff02c46adcc5b7a69feb1cc97e555c7bb5c7a89407dd10d4d0211daaf2c": {
      "address": "0xD0C967e0dCc5B252af1D497695E52eB72C0083f6",
      "txHash": "0xd3673c8ee3921ed0660c260a8689363456a674b7d35f820c01e9b6a583f1a8fb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:68"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:70"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:72"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:74"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:76"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:78"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:80"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:82"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:84"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:89"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:91"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:93"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:121"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4763_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4763_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4763_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4735"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4735": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT",
              "JAILED"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ede5ced9fe7ff5feb50779fb076041f9cbc180e495124d46cdae2503ca53f6f8": {
      "address": "0xaB87AFBda3f53C312fDBd4dc69EfcCD9Aecb5243",
      "txHash": "0x2b1e3ca3bc4f6d949b3bd56b3ecf96e0e65fc4a27538fc79991ad69da342350e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11101",
            "src": "contracts/StMATIC.sol:42"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)7790_storage",
            "src": "contracts/StMATIC.sol:43"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11333",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11134",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)7783_storage)",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10873",
            "src": "contracts/StMATIC.sol:61"
          },
          {
            "contract": "StMATIC",
            "label": "submitHandler",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:62"
          },
          {
            "contract": "StMATIC",
            "label": "submitThreshold",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:63"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11101": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)7790_storage": {
            "label": "struct StMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11333": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11134": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)7783_storage)": {
            "label": "mapping(uint256 => struct StMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)7783_storage": {
            "label": "struct StMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10873": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "87499022c09fbfd5b8e28b71a18fabae72ebe9fd47322740ff2baa995817e162": {
      "address": "0x809792b662e9DDF299710da93292688B5F8d2583",
      "txHash": "0xf080e3bba1baf8c91816e7471b90cb591cd349b419ade9737f3a96da36bd038e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ValidatorFactory",
            "label": "validators",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ValidatorFactory.sol:17"
          },
          {
            "contract": "ValidatorFactory",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/ValidatorFactory.sol:19"
          },
          {
            "contract": "ValidatorFactory",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/ValidatorFactory.sol:21"
          },
          {
            "contract": "ValidatorFactory",
            "label": "validatorImplementation",
            "type": "t_address",
            "src": "contracts/ValidatorFactory.sol:23"
          }
        ],
        "types": {
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6be4baa54282d609cc3351538a8d288dc080c11005dc1faf5c9bd4c0fe45132f": {
      "address": "0xb7f886A797E958fd60B8F6D754f3c11586Bb8Ab9",
      "txHash": "0x7d61919d7ab7cba9f11c1f7426880a8f411131133b146f6e445ee110f4019838",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11213",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)11274_storage",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11637",
            "src": "contracts/StMATIC.sol:46"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11246",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:58"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)11267_storage)",
            "src": "contracts/StMATIC.sol:59"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10979",
            "src": "contracts/StMATIC.sol:63"
          },
          {
            "contract": "StMATIC",
            "label": "submitHandler",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:64"
          },
          {
            "contract": "StMATIC",
            "label": "submitThreshold",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:65"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11213": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)11274_storage": {
            "label": "struct IStMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11637": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11246": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)11267_storage)": {
            "label": "mapping(uint256 => struct IStMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)11267_storage": {
            "label": "struct IStMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10979": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "88969859a4800897364a8872e5453a656badc5aecbcdaf89a29acd2ecdc0f732": {
      "address": "0xAE2E7D2034880f350a45B38F6Cb8A11d97bEa8Fd",
      "txHash": "0xe7ae384a19fa1ea9c74e70668efc02be9ee6354a3ab03c4a05e87fa1ad641461",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:42"
          },
          {
            "contract": "PoLidoNFT",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/PoLidoNFT.sol:14"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenIdIndex",
            "type": "t_uint256",
            "src": "contracts/PoLidoNFT.sol:15"
          },
          {
            "contract": "PoLidoNFT",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/PoLidoNFT.sol:16"
          },
          {
            "contract": "PoLidoNFT",
            "label": "owner2Tokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:19"
          },
          {
            "contract": "PoLidoNFT",
            "label": "token2Index",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:22"
          },
          {
            "contract": "PoLidoNFT",
            "label": "address2Approved",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:25"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenId2ApprovedIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:28"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "bb183adf57b4ff5ef733b012893218130eaf2d1523a86560a604d4b10d6d13bf": {
      "address": "0x6f364e3d6400c061f5684FDcce3142f74bB46422",
      "txHash": "0xbde4331e36e5223421399d5663707f4006720df9a7079c544b60a98dbfc518c2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:71"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:73"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:75"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:77"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:79"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:81"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:83"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:85"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:90"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:92"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:94"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:120"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4822_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:130"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4822_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4822_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4794"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4794": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT",
              "JAILED",
              "EJECTED"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1fef0b1248bc7205c8e28aa8689137447629545fb915b1f9f127d1927f1f71b4": {
      "address": "0x9b77e7008347A18254873ca7e6C438728FB93f5D",
      "txHash": "0x2ca7a2fa0dea87aa8810dd862e69423669a35ac33a25d31d155d20d56253c386",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11208",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)11269_storage",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11632",
            "src": "contracts/StMATIC.sol:46"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11241",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:58"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)11262_storage)",
            "src": "contracts/StMATIC.sol:59"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10974",
            "src": "contracts/StMATIC.sol:63"
          },
          {
            "contract": "StMATIC",
            "label": "submitHandler",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:64"
          },
          {
            "contract": "StMATIC",
            "label": "submitThreshold",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:65"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11208": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)11269_storage": {
            "label": "struct IStMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11632": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11241": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)11262_storage)": {
            "label": "mapping(uint256 => struct IStMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)11262_storage": {
            "label": "struct IStMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10974": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "eef49c0d092ee36ad236e4441fd8830bc263b5a9bbef31d944f1cc13d664c7b4": {
      "address": "0x6B46Bb7862e69691B56ba448a0F96BE41744528B",
      "txHash": "0x50a284a9c3dc556229af5cae0f90f796f1fa6d82aa666e121737da61c50b484b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11087",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)11148_storage",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11511",
            "src": "contracts/StMATIC.sol:46"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11120",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:58"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)11141_storage)",
            "src": "contracts/StMATIC.sol:59"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10859",
            "src": "contracts/StMATIC.sol:63"
          },
          {
            "contract": "StMATIC",
            "label": "submitHandler",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:64"
          },
          {
            "contract": "StMATIC",
            "label": "submitThreshold",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:65"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11087": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)11148_storage": {
            "label": "struct IStMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11511": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11120": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)11141_storage)": {
            "label": "mapping(uint256 => struct IStMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)11141_storage": {
            "label": "struct IStMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10859": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "898d707092982619cb5fe60b4ac220dfc70a52e6b35839b8b0c9bf88470d9ab9": {
      "address": "0x77E018f2A8FD6f57F856C95401233B304e4d8C3e",
      "txHash": "0xbf15224eff34a2fdf47d73beb7c6024f481b59878029f3eea24af71b9c424c30",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:71"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:73"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:75"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:77"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:79"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:81"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:83"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:85"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:90"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:92"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:94"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:120"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4822_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:130"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4822_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4822_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4794"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4794": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT",
              "JAILED",
              "EJECTED"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "aee8d9a8f6806ba5286b08f5f0f7998345cd9ef82958a0cb7527cab77b54ce82": {
      "address": "0x8388959Ac16a01291Ab9bB3180A89B7FC476F178",
      "txHash": "0x45c98417d7577e104812f47936d3f43e5568a45f7fbc5d04e2ffdd96ddb60088",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11078",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)11139_storage",
            "src": "contracts/StMATIC.sol:45"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11502",
            "src": "contracts/StMATIC.sol:46"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11111",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:52"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:58"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)11132_storage)",
            "src": "contracts/StMATIC.sol:59"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10854",
            "src": "contracts/StMATIC.sol:63"
          },
          {
            "contract": "StMATIC",
            "label": "submitHandler",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:64"
          },
          {
            "contract": "StMATIC",
            "label": "submitThreshold",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:65"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11078": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)11139_storage": {
            "label": "struct IStMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11502": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11111": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)11132_storage)": {
            "label": "mapping(uint256 => struct IStMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)11132_storage": {
            "label": "struct IStMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)10854": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "2b18ae3d004f8571d4ce476985874f6cf5a75b22575585a2629dc659e85acc7b": {
      "address": "0x2Ff777e6098Cbf5fd533D595C1FA21CC776d8687",
      "txHash": "0xed9d2657f6904817513d1bf3fee7e7028df76173a57adfd08bacfac55547d46b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:71"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:73"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:75"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:77"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:79"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:81"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:83"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:85"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:90"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:92"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:94"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:120"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4822_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:130"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4822_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4822_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4794"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4794": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT",
              "JAILED",
              "EJECTED"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a4343ee575b8cc6542596ed8b64b3426ae6e7f3d4f769819d0e1061843e87db2": {
      "address": "0x8F0C5FE1e6D18D21A9CED5791D3a6813A2C217B3",
      "txHash": "0x4e61d1738018509eae3712f6ae6c09e541efd30b23233d40f5dd0b15bbac1eca",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:71"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:73"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:75"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:77"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:79"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:81"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:83"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:85"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:90"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:92"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:94"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:120"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4869_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:130"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "nodeOperatorCounter",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:132"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4869_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4869_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4841"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4841": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT",
              "JAILED",
              "EJECTED"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "96b108d9cf110e01807ad467c507d7c06a3bd93304715757f48429b9ce3a47cd": {
      "address": "0x6B3BF80761554c8bA2b98241b2072a5E90c973FA",
      "txHash": "0xb2f5c6992dc69f7e586d5516668e83b915b8cdf56f5d3ed5b552196937e663cd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "PoLidoNFT",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/PoLidoNFT.sol:14"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenIdIndex",
            "type": "t_uint256",
            "src": "contracts/PoLidoNFT.sol:15"
          },
          {
            "contract": "PoLidoNFT",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/PoLidoNFT.sol:16"
          },
          {
            "contract": "PoLidoNFT",
            "label": "owner2Tokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:19"
          },
          {
            "contract": "PoLidoNFT",
            "label": "token2Index",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:22"
          },
          {
            "contract": "PoLidoNFT",
            "label": "address2Approved",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:25"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenId2ApprovedIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:28"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "583929690ddeff18965bb5229c4c3e407a62e4362d4a5e667d8eaff64d008736": {
      "address": "0x228dD185bE77baCad6f2efe6Ec5cC246A9cF9C39",
      "txHash": "0x91c30051cb9159ba64d8349e0da9c4d60ef93da150acbded5ba73760d63bf020",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:71"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:73"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalInactiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:75"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalActiveNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:77"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalStoppedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:79"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalUnstakedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:81"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalClaimedNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:83"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalWaitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:85"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "totalExitNodeOperator",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:87"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorFactory",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:90"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:92"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "polygonERC20",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:94"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/NodeOperatorRegistry.sol:96"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minAmountStake",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:99"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "minHeimdallFees",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:102"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "commissionRate",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:105"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsRestake",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:108"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "allowsUnjail",
            "type": "t_bool",
            "src": "contracts/NodeOperatorRegistry.sol:111"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "slashingDelay",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:114"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "defaultMaxDelegateLimit",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:117"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:120"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operatorOwners",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:124"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorShare2OperatorId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:127"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "operators",
            "type": "t_mapping(t_uint256,t_struct(NodeOperator)4869_storage)",
            "src": "contracts/NodeOperatorRegistry.sol:130"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "nodeOperatorCounter",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:132"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(NodeOperator)4869_storage)": {
            "label": "mapping(uint256 => struct NodeOperatorRegistry.NodeOperator)"
          },
          "t_struct(NodeOperator)4869_storage": {
            "label": "struct NodeOperatorRegistry.NodeOperator",
            "members": [
              {
                "label": "status",
                "type": "t_enum(NodeOperatorStatus)4841"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "rewardAddress",
                "type": "t_address"
              },
              {
                "label": "signerPubkey",
                "type": "t_bytes_storage"
              },
              {
                "label": "validatorShare",
                "type": "t_address"
              },
              {
                "label": "validatorProxy",
                "type": "t_address"
              },
              {
                "label": "validatorId",
                "type": "t_uint256"
              },
              {
                "label": "commissionRate",
                "type": "t_uint256"
              },
              {
                "label": "slashed",
                "type": "t_uint256"
              },
              {
                "label": "slashedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "statusUpdatedTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "maxDelegateLimit",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(NodeOperatorStatus)4841": {
            "label": "enum NodeOperatorRegistry.NodeOperatorStatus",
            "members": [
              "INACTIVE",
              "ACTIVE",
              "STOPPED",
              "UNSTAKED",
              "CLAIMED",
              "WAIT",
              "EXIT",
              "JAILED",
              "EJECTED"
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e6f6127b0a8c110c7fcea3afaddaee9cb1425b52a05bb8f58c1bbdb898f15b38": {
      "address": "0xE199C8fBAF1b1b2dcf336f130FB9d0Eb49BfffBD",
      "txHash": "0x065c0b79a02f59f65e2a90e5f57ed51ae62ea35b3908902a62b92521df713b5f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperator",
            "type": "t_contract(INodeOperatorRegistry)11302",
            "src": "contracts/StMATIC.sol:48"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)11363_storage",
            "src": "contracts/StMATIC.sol:49"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)11726",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)11335",
            "src": "contracts/StMATIC.sol:51"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:54"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:55"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:57"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:58"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:59"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:60"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:61"
          },
          {
            "contract": "StMATIC",
            "label": "minValidatorBalance",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:62"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)11356_storage)",
            "src": "contracts/StMATIC.sol:63"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)11078",
            "src": "contracts/StMATIC.sol:67"
          },
          {
            "contract": "StMATIC",
            "label": "submitHandler",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:68"
          },
          {
            "contract": "StMATIC",
            "label": "submitThreshold",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:69"
          },
          {
            "contract": "StMATIC",
            "label": "stMaticWithdrawRequest",
            "type": "t_array(t_struct(RequestWithdraw)11356_storage)dyn_storage",
            "src": "contracts/StMATIC.sol:70"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)11302": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)11363_storage": {
            "label": "struct IStMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)11726": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)11335": {
            "label": "contract IPoLidoNFT"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)11356_storage)": {
            "label": "mapping(uint256 => struct IStMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)11356_storage": {
            "label": "struct IStMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestTime",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IFxStateRootTunnel)11078": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(RequestWithdraw)11356_storage)dyn_storage": {
            "label": "struct IStMATIC.RequestWithdraw[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    }
  }
}
